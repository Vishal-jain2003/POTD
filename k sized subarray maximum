 // k sized subarray maximum looks like sliding window but solve by little catch and it is called Deque

https://www.geeksforgeeks.org/problems/maximum-of-all-subarrays-of-size-k3101/1

Deque is data structure in which we implement queue and stack both at a time here we can add elements from start and end and also remove element from both side 
algo for question:
1. first we find max for starting k elements and put it in our answer then 
2 . from k to n we find max element in k size window and also find max in every window and put in our list 

class Solution {
    // Function to find maximum of each subarray of size k.
    public ArrayList<Integer> max_of_subarrays(int k, int arr[]) {
        // Your code here
        // approach using deque
        int n = arr.length;
        ArrayList<Integer>ans = new ArrayList<>();
        Deque<Integer>dq=new LinkedList<>();
        for (int i=0;i<k;i++)
        {
            while(!dq.isEmpty() && arr[i]>=arr[dq.peekLast()])
            {
                dq.removeLast();
            }
            dq.addLast(i);
        }
        for (int i=k;i<n;i++)
        {
            ans.add(arr[dq.peek()]);
            // check for window termination
            while(!dq.isEmpty() && dq.peek()<=i-k)
            {
                dq.removeFirst();
            }
            while(!dq.isEmpty() && arr[i]>=arr[dq.peekLast()])
            {
                dq.removeLast();
            }
            dq.addLast(i);
            
        }
        ans.add(arr[dq.peek()]);
        return ans;           
    }
}
