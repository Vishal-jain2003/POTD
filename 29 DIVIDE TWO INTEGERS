// DIVIDE TWO INTEGERS

HERE WE CAN'T USE DIVIDE AND MODULUS OPERATOR SO WE USE BIT MANIPULATION HERE

WE TAKE A WHILE LOOP TILL DIVIDEND<=DIVISOR
 NOW WE MAKE OUR DIVIDEND/ DIVISOR TILL POWER OF 2^  HERE TAKE AN EXAMPLE 

 DIVISOR = 21
 DIVIDEND = 3

 NOW 3(2^2+2^1+2^0)   SO IN EACH STEP ADDING QUOTIENT TO OUR ANSWER WE REDUCE DIVISOR BY QUOTIENT LIKE 21 - 3(2^2)

 NOW IT REMAINS 10/3  AND SO ON 
class Solution {
    public int divide(int divi, int dsori) {
        boolean sign = false;
        if (divi==Integer.MIN_VALUE && dsori==-1) return Integer.MAX_VALUE;
        if ((divi>0 && dsori<0) || (divi<0 && dsori>0))
        {
            sign = true;
        }
        
        long ans=0;
       long  div=Math.abs((long)divi);
        long dsor=Math.abs((long)dsori);

        while(div >=dsor)
        {
            long count=0;
             while(div >= (dsor<<(count+1)))   
             {
                count+=1;  // TAKE EXAMPLE OF 21 / 3 IN FIRST STEP COUNT = 2 
             }
             ans+=(1<<count);  // AND ANS ADD 4 2^2 
             div-=(dsor<<count);  // NOW AFTER 1 ITERATEION IT DIV BECOME 12 AND SO ON 

        }
          if (sign)
        {
            ans*=-1;
        }
        if (ans>Integer.MAX_VALUE)
        {
            return Integer.MIN_VALUE;
            // return Integer.MAX_VALUE;
        }
        else if (ans<Integer.MIN_VALUE)
        {
            //   return Integer.MIN_VALUE;
            return Integer.MAX_VALUE;

        }
       
       
        return (int)ans;
    }
}


Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.

The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.

Return the quotient after dividing dividend by divisor.

Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.

 

Example 1:

Input: dividend = 10, divisor = 3
Output: 3
Explanation: 10/3 = 3.33333.. which is truncated to 3.
Example 2:

Input: dividend = 7, divisor = -3
Output: -2
Explanation: 7/-3 = -2.33333.. which is truncated to -2.
 

Constraints:

-231 <= dividend, divisor <= 231 - 1
divisor != 0
